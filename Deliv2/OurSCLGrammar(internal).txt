	The BNF of our version of an SCL programming language.
Created by Dylan Carder, refined by Connor Bell, Dylan Carder,
Sebastian Utz, and Kevin vu.
	In this version of BNF, instead of using epsilon to indicate
the absence of a non-terminal, we decided on a (left blank) statement
to allow for easier understanding. The non-terminals IDENTIFIER and
ENDLINE represent identifier and end of statement tokens generated
by the scanner and utilized by the parse program.
_____________________________________________________________________


start -> function
function -> type identifier parameter ENDLINE expression
	| (left blank)
parameter -> type identifier
	| parameter parameter
	| (left blank)
type -> INT | FLOAT | CHAR | VOID | BOOL
identifier -> (specified in program, a variable name)
constant -> (specified in program, a numeric value)
operator -> * | / | + | - | =
expression -> type identifier ENDLINE expression
	| identifier operator returnable expression
	| PRINT returnable expression
	| RETURN returnable ENDLINE function
	| ENDLINE expression
	| (left blank)
returnable -> identifier
	| constant
	| (left blank, parser needs to detect if there is the
	  identifier operator returnable expression <expr> RHS)